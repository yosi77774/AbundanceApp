{"ast":null,"code":"import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n  return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(elementOrSelector, onPressStart, options = {}) {\n  const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n  const startPress = startEvent => {\n    const element = startEvent.currentTarget;\n    if (!isValidPressEvent(startEvent) || isPressing.has(element)) return;\n    isPressing.add(element);\n    const onPressEnd = onPressStart(startEvent);\n    const onPointerEnd = (endEvent, success) => {\n      window.removeEventListener(\"pointerup\", onPointerUp);\n      window.removeEventListener(\"pointercancel\", onPointerCancel);\n      if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n        return;\n      }\n      isPressing.delete(element);\n      if (onPressEnd) {\n        onPressEnd(endEvent, {\n          success\n        });\n      }\n    };\n    const onPointerUp = upEvent => {\n      onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));\n    };\n    const onPointerCancel = cancelEvent => {\n      onPointerEnd(cancelEvent, false);\n    };\n    window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n    window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n  };\n  elements.forEach(element => {\n    if (!isElementKeyboardAccessible(element)) {\n      element.tabIndex = 0;\n    }\n    const target = options.useGlobalTarget ? window : element;\n    target.addEventListener(\"pointerdown\", startPress, eventOptions);\n    element.addEventListener(\"focus\", event => enableKeyboardPress(event, eventOptions), eventOptions);\n  });\n  return cancelEvents;\n}\nexport { press };","map":{"version":3,"names":["isDragActive","isPrimaryPointer","setupGesture","enableKeyboardPress","isElementKeyboardAccessible","isNodeOrChild","isPressing","isValidPressEvent","event","press","elementOrSelector","onPressStart","options","elements","eventOptions","cancelEvents","startPress","startEvent","element","currentTarget","has","add","onPressEnd","onPointerEnd","endEvent","success","window","removeEventListener","onPointerUp","onPointerCancel","delete","upEvent","useGlobalTarget","target","cancelEvent","addEventListener","forEach","tabIndex"],"sources":["C:/Users/yosi7/projects/abundance-app/node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(elementOrSelector, onPressStart, options = {}) {\n    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n    const startPress = (startEvent) => {\n        const element = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(element))\n            return;\n        isPressing.add(element);\n        const onPressEnd = onPressStart(startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n                return;\n            }\n            isPressing.delete(element);\n            if (onPressEnd) {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, options.useGlobalTarget ||\n                isNodeOrChild(element, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    elements.forEach((element) => {\n        if (!isElementKeyboardAccessible(element)) {\n            element.tabIndex = 0;\n        }\n        const target = options.useGlobalTarget ? window : element;\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\n        element.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions), eventOptions);\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,2BAA2B,QAAQ,oCAAoC;AAChF,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,UAAU,QAAQ,mBAAmB;;AAE9C;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAC9B,OAAOP,gBAAgB,CAACO,KAAK,CAAC,IAAI,CAACR,YAAY,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,KAAKA,CAACC,iBAAiB,EAAEC,YAAY,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1D,MAAM,CAACC,QAAQ,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAAGb,YAAY,CAACQ,iBAAiB,EAAEE,OAAO,CAAC;EACvF,MAAMI,UAAU,GAAIC,UAAU,IAAK;IAC/B,MAAMC,OAAO,GAAGD,UAAU,CAACE,aAAa;IACxC,IAAI,CAACZ,iBAAiB,CAACU,UAAU,CAAC,IAAIX,UAAU,CAACc,GAAG,CAACF,OAAO,CAAC,EACzD;IACJZ,UAAU,CAACe,GAAG,CAACH,OAAO,CAAC;IACvB,MAAMI,UAAU,GAAGX,YAAY,CAACM,UAAU,CAAC;IAC3C,MAAMM,YAAY,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;MACxCC,MAAM,CAACC,mBAAmB,CAAC,WAAW,EAAEC,WAAW,CAAC;MACpDF,MAAM,CAACC,mBAAmB,CAAC,eAAe,EAAEE,eAAe,CAAC;MAC5D,IAAI,CAACtB,iBAAiB,CAACiB,QAAQ,CAAC,IAAI,CAAClB,UAAU,CAACc,GAAG,CAACF,OAAO,CAAC,EAAE;QAC1D;MACJ;MACAZ,UAAU,CAACwB,MAAM,CAACZ,OAAO,CAAC;MAC1B,IAAII,UAAU,EAAE;QACZA,UAAU,CAACE,QAAQ,EAAE;UAAEC;QAAQ,CAAC,CAAC;MACrC;IACJ,CAAC;IACD,MAAMG,WAAW,GAAIG,OAAO,IAAK;MAC7BR,YAAY,CAACQ,OAAO,EAAEnB,OAAO,CAACoB,eAAe,IACzC3B,aAAa,CAACa,OAAO,EAAEa,OAAO,CAACE,MAAM,CAAC,CAAC;IAC/C,CAAC;IACD,MAAMJ,eAAe,GAAIK,WAAW,IAAK;MACrCX,YAAY,CAACW,WAAW,EAAE,KAAK,CAAC;IACpC,CAAC;IACDR,MAAM,CAACS,gBAAgB,CAAC,WAAW,EAAEP,WAAW,EAAEd,YAAY,CAAC;IAC/DY,MAAM,CAACS,gBAAgB,CAAC,eAAe,EAAEN,eAAe,EAAEf,YAAY,CAAC;EAC3E,CAAC;EACDD,QAAQ,CAACuB,OAAO,CAAElB,OAAO,IAAK;IAC1B,IAAI,CAACd,2BAA2B,CAACc,OAAO,CAAC,EAAE;MACvCA,OAAO,CAACmB,QAAQ,GAAG,CAAC;IACxB;IACA,MAAMJ,MAAM,GAAGrB,OAAO,CAACoB,eAAe,GAAGN,MAAM,GAAGR,OAAO;IACzDe,MAAM,CAACE,gBAAgB,CAAC,aAAa,EAAEnB,UAAU,EAAEF,YAAY,CAAC;IAChEI,OAAO,CAACiB,gBAAgB,CAAC,OAAO,EAAG3B,KAAK,IAAKL,mBAAmB,CAACK,KAAK,EAAEM,YAAY,CAAC,EAAEA,YAAY,CAAC;EACxG,CAAC,CAAC;EACF,OAAOC,YAAY;AACvB;AAEA,SAASN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}